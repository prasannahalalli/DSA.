#include <stdio.h>
#include <stdlib.h>
#define MAX 5
char circularQueue[MAX];
int front = -1, rear = -1;
void insertElement(char element);
void deleteElement();
void displayStatus();
void displayQueue();
int isFull();
int isEmpty();
int main() {
int choice;
char element;
do {
printf("\nCircular Queue Menu\n");
printf("a. Insert an Element\n");
printf("b. Delete an Element\n");
printf("c. Display Status\n");
printf("d. Display Circular Queue\n");
printf("e. Exit\n");
printf("Enter your choice: ");
scanf(" %c", &element);
switch (element) {
case 'a':
printf("Enter the element to be inserted: ");
scanf(" %c", &element);
insertElement(element);
break;
case 'b':
deleteElement();
break;
case 'c':
displayStatus();
break;
case 'd':
displayQueue();
break;
case 'e':
printf("Exiting the program. Goodbye!\n");
exit(0);
default:
printf("Invalid choice! Please enter a valid option.\n");
}
} while (1);
return 0;
}
void insertElement(char element) {
if (isFull()) {
printf("Circular Queue is full! Cannot insert element (Overflow).\n");
return;
}
if (isEmpty())
front = rear = 0;
else
rear = (rear + 1) % MAX;
circularQueue[rear] = element;
printf("Element '%c' inserted successfully.\n", element);
}
void deleteElement() {
if (isEmpty()) {
printf("Circular Queue is empty! Cannot delete element (Underflow).\n");
return;
}
if (front == rear)
front = rear = -1;
else
front = (front + 1) % MAX;
printf("Element deleted successfully.\n");
}
void displayStatus() {
if (isEmpty())
printf("Circular Queue is empty.\n");
else if (isFull())
printf("Circular Queue is full.\n");
else
printf("Circular Queue is neither empty nor full.\n");
}
void displayQueue() {
if (isEmpty()) {
printf("Circular Queue is empty.\n");
return;
}
printf("Circular Queue: ");
int i = front;
do {
printf("%c ", circularQueue[i]);
i = (i + 1) % MAX;
} while (i != (rear + 1) % MAX);
printf("\n");
}
int isFull() {
return (front == 0 && rear == MAX - 1) || (front == rear + 1);
}
int isEmpty() {
return front == -1;
}